module Web.WitAI.Types.Responses.Message where

import           Data.Text
import           Data.Map

import           Control.Applicative  ((<|>))
import           Data.Aeson
import           Data.Aeson.Types     (typeMismatch)


-- ==================== --
--   MESSAGE RESPONSE   --
-- ==================== --

-- Response to a GET /message or POST /speech request
data WitAIMessageResponse = WitAIMessageResponse
    { witres_message_msg_id   :: Text
  -- Either the ID you passed to the API or an ID generated by the API
    , witres_message__text    :: Text
  -- Either the text sent in the 'q' argument or the transcript of the speech input.
  -- This value should be used only for debug as Wit.AI focuses on the intent.
    , witres_message_entities :: Map Text [WitAIEntity]
  -- Object of entities. Each entity will contain an array []
  -- of values even if there is only one value.
    } deriving (Eq, Show)

-- The entity object
data WitAIEntity = WitAIEntity
    { witai_entity_metadata   :: Maybe Text
    , witai_entity_value      :: Either Text (Map Text Text)
    , witai_entity_confidence :: Double
    } deriving (Eq, Show)


-- ---------------------------- --
--  MESSAGE RESPONSE INSTANCES  --
-- ---------------------------- --

instance FromJSON WitAIMessageResponse where
    parseJSON (Object o) = WitAIMessageResponse <$> o .: "msg_id"
                                                <*> o .: "_text"
                                                <*> o .:? "entities"
    parseJSON wat = typeMismatch "WitAIMessageResponse" wat


instance FromJSON WitAIEntity where
    parseJSON (Object o) = WitAIEntity <$> o .:? "metadata"
                                       <*> o .: "value"
                                       <*> o .: "confidence"
    parseJSON wat = typeMismatch "WitAIEntity" wat


instance {-# OVERLAPPING #-} FromJSON (Either Text (Map Text Text)) where
    parseJSON obj@(Object _) = Right <$> parseJSON obj
                            <|> fail "expected different object \"Web.WitAI.Types.Response.Message\""
    parseJSON str@(String _) = Left <$> parseJSON str
                            <|> fail "expected different string \"Web.WitAI.Types.Response.Message\""
    parseJSON wat = typeMismatch "(Either Text (Map Text Text))" wat

instance ToJSON WitAIMessageResponse where
    toJSON (WitAIMessageResponse msg_id txt ents) = object [ "msg_id"   .= msg_id
                                                           , "_text"    .= txt
                                                           , "entities" .= ents
                                                           ]

instance ToJSON WitAIEntity where
    toJSON (WitAIEntity metadata value confidence) = object [ "metadata"   .= metadata
                                                            , "value"      .= value
                                                            , "confidence" .= confidence]

instance {-# OVERLAPPING #-} ToJSON (Either Text (Map Text Text)) where
    toJSON (Left s)    = String s
    toJSON (Right map) = toJSON map